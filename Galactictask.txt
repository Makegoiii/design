abstract class Drone {    private String droneId;    private String droneStatus;    private double maxLoad;    private double currentLoad;    public Drone(String droneId, double maxLoad) {        this.droneId = droneId;        this.maxLoad = maxLoad;        this.currentLoad = 0;        this.droneStatus = "IDLE";    }    public boolean loadCargo(double weight) {        if (weight + currentLoad <= maxLoad) {            currentLoad += weight;            return true;        }        return false;    }    public void startDelivery() {        if (droneStatus.equals("IDLE") && currentLoad > 0) {            droneStatus = "IN_FLIGHT";        }    }    public void completeDelivery() {        droneStatus = "IDLE";        currentLoad = 0;    }    public String getStatus() {        return droneStatus;    }    public abstract double calculateFlightTime(double distance);}class LightDrone extends Drone {    public LightDrone(String droneId) {        super(droneId, 50);    }    @Override    public double calculateFlightTime(double distance) {        return distance / 20.0;    }}class HeavyDrone extends Drone {    public HeavyDrone(String droneId) {        super(droneId, 200);    }    @Override    public double calculateFlightTime(double distance) {        return distance / 10.0;    }}abstract class CelestialBody {    private String bodyName;    private double coordX, coordY;    public CelestialBody(String bodyName, double coordX, double coordY) {        this.bodyName = bodyName;        this.coordX = coordX;        this.coordY = coordY;    }    public double distanceTo(CelestialBody other) {        return Math.sqrt(Math.pow(this.coordX - other.coordX, 2) + Math.pow(this.coordY - other.coordY, 2));    }}class Planet extends CelestialBody {    private String atmosphere;    public Planet(String bodyName, double coordX, double coordY, String atmosphere) {        super(bodyName, coordX, coordY);        this.atmosphere = atmosphere;    }}class SpaceStation extends CelestialBody {    private int level;    public SpaceStation(String bodyName, double coordX, double coordY, int level) {        super(bodyName, coordX, coordY);        this.level = level;    }}class Cargo {    private double cargoWeight;    private String details;    public Cargo(double cargoWeight, String details) {        this.cargoWeight = cargoWeight;        this.details = details;    }    public double getWeight() {        return cargoWeight;    }}class DeliveryTask {    private CelestialBody startPoint, endPoint;    private Cargo shipment;    private Drone assignedDrone;    public DeliveryTask(CelestialBody startPoint, CelestialBody endPoint, Cargo shipment) {        this.startPoint = startPoint;        this.endPoint = endPoint;        this.shipment = shipment;    }    public boolean assignDrone(Drone drone) {        if (drone.loadCargo(shipment.getWeight())) {            assignedDrone = drone;            drone.startDelivery();            return true;        }        return false;    }    public void completeTask() {        if (assignedDrone != null) {            assignedDrone.completeDelivery();        }    }}public class Main {    public static void main(String[] args) {        Planet mars = new Planet("Mars", 0, 0, "Thin CO2 Atmosphere");        SpaceStation iss = new SpaceStation("ISS", 100, 100, 5);        LightDrone lightDrone = new LightDrone("LD-001");        HeavyDrone heavyDrone = new HeavyDrone("HD-001");        Cargo cargo = new Cargo(40, "Medical Supplies");        DeliveryTask task = new DeliveryTask(mars, iss, cargo);        if (task.assignDrone(lightDrone)) {            System.out.println("Delivery started with LightDrone.");            double distance = mars.distanceTo(iss);            System.out.println("Estimated flight time: " + lightDrone.calculateFlightTime(distance) + " hours");            task.completeTask();            System.out.println("Delivery completed.");        } else {            System.out.println("Drone could not take the cargo.");        }    }}